setting Python on Ubuntu Env
1. Python 설치
    Ubuntu에서 Python을 설치하는 방법은 다음과 같습니다. Ubuntu는 일반적으로 Python이 기본적으로 설치되어 있지만, 최신 버전을 설치하거나 다른 버전을 설치하려면 다음 단계를 따라 진행할 수 있습니다.
    1) 현재 Python 버전 확인
        1) 터미널을 열고 다음 명령어를 입력하여 현재 설치된 Python 버전을 확인합니다.
            1) bash>>> python3 --version  
    2) 패키지 목록 업데이트
        1) 최신 패키지 목록으로 업데이트합니다.
            1) bash>>> sudo apt update  
    3) Python 설치
        1) Python의 최신 버전을 설치합니다. 예를 들어, Python 3.x를 설치하려면 다음 명령어를 입력합니다.
            1) bash>>> sudo apt install python3  
    4) pip 설치
        1) Python 패키지 관리자인 pip를 설치하려면 다음 명령어를 입력합니다.
            1) bash>>> sudo apt install python3-pip  

    5) 설치 확인
        1) Python과 pip이 잘 설치되었는지 확인합니다.
            1) bash>>> python3 --version  
            2) bash>>> pip3 --version  
    5) 가상 환경 설정 (선택 사항)
        1) 프로젝트마다 독립적인 파이썬 환경을 유지하려면 가상 환경을 사용하는 것이 좋습니다. 다음 명령어로 가상 환경을 설정할 수 있습니다.
            1) bash>>> sudo apt install python3-venv  # venv 모듈 설치  
            2) bash>>> mkdir myproject  
            3) bash>>> cd myproject  
            4) bash>>> python3 -m venv myVenv_01  # 가상 환경 생성  
            5) bash>>> source myVenv_01/bin/activate  # 가상 환경 활성화  
        2) 가상 환경을 탈출하려면:
            1) bash>>> deactivate  

    6) 추가로 필요한 패키지가 있다면 pip을 사용하여 설치하십시오. 예를 들어:
        1) bash>>> pip install <패키지 이름>  
            1) 이러한 과정을 통해 쉽게 Python 개발을 시작할 수 있습니다.

2. python version upgrade
    Ubuntu에서 Python의 최신 버전으로 업그레이드하려면 몇 가지 방법이 있습니다. 기본 시스템에 설치된 Python 버전을 업그레이드하거나, 별도로 최신 버전을 설치할 수 있습니다. 아래에 두 가지 방법을 설명하겠습니다.
    1) APT를 통한 업그레이드
        1) Ubuntu의 기본 패키지 관리자인 APT를 사용하여 Python을 업그레이드할 수 있습니다. 하지만 APT를 사용하면 리포지토리에 있는 최신 버전으로 업그레이드됩니다. 이 방법으로는 최신 Python 버전이 아닌 경우가 많습니다.
            1) bash>>> sudo apt update  
            2) bash>>> sudo apt upgrade python3  
    2) deadsnakes PPA를 사용하여 업그레이드
        1) 내장된 Python 버전보다 더 최신의 Python을 설치하려면 deadsnakes PPA(Personal Package Archive)를 추가하는 것이 좋습니다. 다음 단계를 따라 진행하세요:
            1) deadsnakes PPA 추가:
                1) bash>>> sudo add-apt-repository ppa:deadsnakes/ppa  
                2) bash>>> sudo apt update  
        2) 원하는 Python 버전 설치 (예: Python 3.11):
            1) sudo apt install python3.11  
                1) 설치가 완료된 후, 아래 명령어로 설치된 버전을 확인합니다.
                    1) bash>>> python3.11 --version  
    3) 소스에서 Python 설치
        1) 아주 최신 버전이 필요하다면 Python 공식 웹사이트에서 소스 코드를 다운로드하여 수동으로 설치할 수 있습니다.
        2) 필요한 라이브러리 설치:
            1) bash>>> sudo apt install build-essential libssl-dev libffi-dev python3-dev  
        3) Python의 최신 소스코드 다운로드:
            1) bash>>> wget https://www.python.org/ftp/python/{버전번호}/Python-{버전번호}.tar.xz  
                1) 여기서 {버전번호}는 설치하려는 Python의 버전 번호로 대체합니다.
            2) 압축 해제:
                1) bash>>> tar -xf Python-{버전번호}.tar.xz  
            3) 디렉토리로 이동 후 빌드 및 설치:
                1) bash>>> cd Python-{버전번호}  
                2) bash>>> ./configure --enable-optimizations  
                3) bash>>> make  
                4) sudo make altinstall  
            4) 여기서 altinstall을 사용하는 것은 기본 Python을 덮어쓰지 않기 위해서입니다.
    4) 결론
        1) 기본적으로 시스템에 설치된 Python을 업그레이드하는 것이 가능하지만, 최신 기능이나 버전이 필요하다면 PPA를 사용하거나 소스로 설치하는 방법을 권장합니다. 설치 후 python3.x 명령어를 활용하여 원하는 버전을 사용하실 수 있습니다.
3.Upgrade와 update 차이가 뭐야?
    upgrade와 update는 패키지 관리 시스템에서 사용하는 용어로, 주로 Ubuntu와 같은 리눅스 배포판에서 사용됩니다. 이 두 용어는 관련이 있지만 서로 다른 작업을 나타냅니다. 아래에 각각의 차이를 설명하겠습니다.
    1) update
        1) 정의: 패키지 목록을 업데이트합니다. 이는 패키지 관리자가 현재 사용 가능한 패키지와 버전 정보를 갱신하는 과정입니다.
        2) 작업: 시스템에 설치된 패키지가 아닌, 레포지토리에 있는 패키지 목록을 가져오는 것입니다. 즉, 패키지를 설치하지 않거나 변경하지 않습니다.
        3) 사용 예:
            1) bash>>> sudo apt update  
                1) 위 명령어를 실행하면, Ubuntu는 설정된 소프트웨어 소스(레포지토리)에서 패키지 목록을 최신 상태로 갱신합니다.
    2) upgrade
        1) 정의: 설치된 패키지를 최신 버전으로 업그레이드합니다. 이는 업데이트된 버전의 패키지를 설치하는 과정입니다.
        2) 작업: 실제로 설치된 패키지의 버전을 최신으로 변경하는 것입니다. 이 작업은 update 후에 주로 수행합니다.
        3) 사용 예:
            1) bash>>> sudo apt upgrade  
                1) 위 명령어를 실행하면, 설치된 패키지 중 업데이트된 버전이 있을 경우 해당 패키지를 최신 버전으로 업그레이드합니다.
    3) 요약
        1) update: 패키지 목록을 최신 상태로 갱신.
        2) upgrade: 설치된 패키지를 최신 버전으로 업그레이드.
        3) 일반적으로, 시스템을 유지 관리할 때는 sudo apt update로 패키지 목록을 먼저 업데이트한 후, sudo apt upgrade로 패키지를 업그레이드하는 것이 좋은 습관입니다.
4. pip ?
    pip는 Python의 패키지 관리 도구로, Python Package Index (PyPI)에서 소프트웨어 패키지를 설치, 관리하고, 삭제할 수 있게 도와줍니다. pip를 사용하면 필요한 라이브러리나 모듈을 간편하게 설치할 수 있어 개발 환경을 효율적으로 구성할 수 있습니다.
    1) pip의 주요 기능
        1) 패키지 설치: PyPI에 있는 패키지를 쉽게 설치할 수 있습니다.
            1) bash>>> pip install package_name  
        2) 패키지 업그레이드: 설치된 패키지를 최신 버전으로 업그레이드할 수 있습니다.
            1) bash>>> pip install --upgrade package_name  
        3) 패키지 삭제: 더 이상 필요하지 않은 패키지를 삭제할 수 있습니다.
            1) bash>>> pip uninstall package_name  
        4) 패키지 목록 조회: 설치된 패키지 목록을 확인할 수 있습니다.
            1) bash>>> pip list  
    2) 왜 별도로 설치해야 하는가?
        1) 예외 사항: Ubuntu 설치 시 기본적으로 Python과 함께 제공되지 않거나, 특정 Python 버전에서 pip이 설치되지 않는 경우가 있습니다. 예를 들어, Python 2.x와 Python 3.x는 각각 자체적으로 pip를 필요로 합니다.
        2) 환경 관리: 시스템에 여러 버전의 Python이 설치될 수 있는데, 각 Python 버전마다 해당하는 pip가 필요합니다. 각 Python 버전에 맞는 pip를 설치해야 올바르게 작동합니다.
        3) 최신 버전: 시스템 패키지 관리자를 통해 설치된 pip가 절대적으로 최신 버전이 아닐 수 있습니다. 최신 기능이나 패치가 필요하다면, 직접 pip을 업그레이드해야 할 수도 있습니다.
    3) 결론
        1) Python 개발에 있어 pip는 필수 도구이며, 필요한 라이브러리를 쉽게 관리할 수 있게 해 줍니다. 일반적으로 Python을 설치한 후, pip이 제대로 설치되어 있는지 확인하고, 필요시 설치 및 업데이트하는 과정을 거치는 것이 좋습니다.
5.venv(가상환경)
    1) bash>>> python3 -m venv myVenv_01
        1) 명령은 Python에서 가상 환경(virtual environment)을 생성하기 위해 사용되는 명령어입니다. 이 명령의 구성 요소를 구체적으로 설명하겠습니다.
    2) 구성 요소 설명
        1) python3:
            1) 이 부분은 Python 3 버전의 인터프리터를 실행하겠다는 의미입니다. 리눅스 또는 macOS에서 기본적으로 python 명령이 Python 2를 가리킬 수 있기 때문에, 명확하게 Python 3을 사용하기 위해 python3라고 지정합니다.
        2) bash>>> -m venv:
            1) -m 플래그는 Python 모듈을 실행하는 것을 의미합니다. 뒤에 오는 venv는 Python의 표준 라이브러리 중 하나로, 가상 환경을 생성하는 모듈입니다. 이 모듈을 사용하면 패키지를 독립적으로 관리할 수 있는 환경을 생성할 수 있습니다.
        3) myVenv_01:
            1) 이 부분은 생성할 가상 환경의 이름입니다. myVenv_01로 지정하면 myVenv_01라는 디렉토리가 생성되며, 이 디렉토리 안에 가상 환경에 필요한 모든 파일이 포함됩니다. 디렉토리 이름은 원하는 대로 변경할 수 있으며, 예를 들어 myVenv_01와 같은 이름도 사용할 수 있습니다.
    3) 가상 환경의 동작 방식
        1) 가상 환경은 Python 패키지를 설치하고 관리하는 독립적인 공간을 제공합니다. 이를 통해 여러 프로젝트 간의 종속성 충돌을 피할 수 있습니다. 각 가상 환경은 다음과 같은 요소를 포함합니다:
        2) Python 실행 파일: 가상 환경 내에서 특정 Python 버전과 경로를 사용합니다.
        3) 패키지: 가상 환경 내에서 설치한 모든 패키지는 시스템 전역에 영향을 주지 않으며, 다른 가상 환경과 분리됩니다.
    4) 가상 환경 생성 후의 작업
        1) 가상 환경 생성:
            1) bash>>> python3 -m venv myVenv_01  
    5) 가상 환경 활성화:
        1) 리눅스 / macOS:
            1) bash>>> source myVenv_01/bin/activate  
        2) 윈도우:
            1) bash>>> myVenv_01\Scripts\activate  
    6) 가상 환경 비활성화:
        1) bash>>> deactivate  
    7) 요약
        1) python3 -m venv myVenv_01 명령어는 Python 3을 사용하여 현재 디렉터리에 myVenv_01라는 이름의 가상 환경을 생성합니다. 이 환경을 통해 여러 프로젝트에서 서로 다른 라이브러리와 종속성을 독립적으로 관리할 수 있어 개발 작업이 더 효율적이고 안전하게 이루어질 수 있습니다.
