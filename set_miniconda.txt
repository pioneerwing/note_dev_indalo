Setting miniconda
1. Anaconda Vs Miniconda
	1) 참조 : https://docs.anaconda.com/distro-or-miniconda/
	2) 정의 : Conda와 Miniconda는 모두 Python과 R의 패키지 및 환경 관리 도구입니다. 그러나 둘 사이에는 중요한 차이점이 있습니다.

	3) Conda:
		1) 정의: Conda는 패키지 관리 및 환경 관리를 위한 오픈 소스 시스템입니다.
		2) 배포판: Anaconda라는 대규모 배포판의 일부로 제공됩니다. 
			Anaconda에는 수많은 데이터 과학 관련 패키지와 툴이 포함되어 있습니다.
		3) 크기: Anaconda는 기본적으로 약 3GB 이상의 크기를 가지며, 많은 패키지, 라이브러리 및 도구가 포함되어 있습니다.
	4) Miniconda:
		1) 정의: Miniconda는 Conda의 최소한의 배포판입니다. 기본 Conda와 Python만 포함되어 있으며, 추가 패키지는 사용자가 필요에 따라 설치할 수 있습니다.
		2) 크기: Miniconda의 설치 파일은 훨씬 작고, 일반적으로 400MB 이하입니다.
		3) 유연성: 사용자가 필요한 패키지와 환경을 선택하여 설치할 수 있으므로, 필요한 최소한의 구성만으로 시작할 수 있습니다.
	5) 요약하자면, Anaconda는 여러 패키지를 포함한 크고 완전한 배포판이고, Miniconda는 경량화된 버전으로 기본적인 Conda 기능만 제공합니다. 사용자는 자신의 필요에 따라 Miniconda에서 필요한 패키지를 선택적으로 추가할 수 있습니다.

2. miniconda 설치방법
	1) 정의
		1) ubuntu 환경에서 Miniconda를 설치할 때, 일반적으로는 사용자에게 특정 권한이 필요하지 않기 때문에 사용자 홈 디렉토리에 설치하는 것이 가장 편리합니다. 이를 통해 사용자는 설치 경로를 쉽게 관리하고, 필요한 경우 제거하거나 업데이트할 수 있습니다.
	2) 설치 권장 위치:
		1) 사용자 홈 디렉토리: 보통 ~/miniconda3 또는 ~/.miniconda3와 같은 경로에 설치합니다. 이 경로는 사용자만 읽고 쓸 수 있으므로, 다른 사용자의 영향을 받지 않습니다.
	3) 설치 방법:
		1) 디렉토리 생성 (선택 사항, 이미 생성된 경우 생략):
			1) bach>>> mkdir -p ~/miniconda3  
				1) mkdir: "make directory"의 약자로, 새로운 디렉토리를 생성하는 명령입니다.
				2) -p: 이 옵션은 "parents"의 약자로, 상위 디렉토리가 존재하지 않을 경우 함께 생성합니다. 이 덕분에 경로의 일부 디렉토리가 없더라도 오류 없이 중간 디렉토리까지 모두 생성할 수 있습니다.
				3) ~/miniconda3: ~는 현재 사용자의 홈 디렉토리를 나타내며, miniconda3는 생성할 디렉토리의 이름입니다.
		2) Miniconda 설치 파일 다운로드:
			1) bach>>> wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh  
				1) wget: 웹에서 파일을 다운로드하는 명령입니다.
				2) URL: Miniconda 설치 스크립트의 URL입니다.
				3) -O ~/miniconda3/miniconda.sh: 다운로드한 파일의 저장 경로를 지정합니다. 여기서는 ~/miniconda3/miniconda.sh로 저장합니다. (이전에 만든 miniconda3 디렉토리에 저장)
		3) Miniconda 설치:
			1) bash>>> bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3  
				1) bash: Miniconda 설치 스크립트를 실행하는 데 사용됩니다. bash는 "Bourne Again SHell"의 약자로, Unix 및 Linux 시스템에서 널리 사용되는 셸입니다. 기본적으로 커맨드 라인에서 명령어를 입력하고 실행할 수 있게 해주는 프로그램입니다.
				2) ~/miniconda3/miniconda.sh: 설치할 스크립트의 경로입니다.
				3) -b: "batch mode"를 의미하며, 사용자 상호작용 없이 설치가 진행됩니다.
				4) -u: 설치된 Miniconda가 있을 경우, 업데이트를 진행합니다.
				5) -p ~/miniconda3: Miniconda를 설치할 경로를 지정합니다.
		4) 설치 파일 삭제:
			1) bash>>> rm ~/miniconda3/miniconda.sh  
				1) rm: 파일을 삭제하는 명령입니다.
				2) ~/miniconda3/miniconda.sh: 이전 단계에서 다운로드한 설치 스크립트를 삭제합니다. 설치가 완료된 후 불필요한 파일을 정리하는 단계입니다.
		5) 설치경로 setting
			1) PATH 설정 방법
				1) 설치 경로 확인: Miniconda의 기본 설치 경로는 보통 ~/miniconda3입니다. 이 경로가 정확한지 확인합니다.
				2).bashrc 파일 수정: 아래 명령어로 .bashrc 파일을 열고, 경로를 추가합니다.
					1) bash>>> nano ~/.bashrc  
						1) nano는 편집 프로그램
						2) 다음을 파일  내용 맨 아래에 다음 줄을 추가합니다:
					2) bash>>> export PATH="~/miniconda3/bin:$PATH"  
						1) 또는 설치 경로에 따라 경로를 다르게 설정할 수 있습니다.
						2) 변경 사항 적용: .bashrc 파일을 저장(Ctrl + O)하고 나와서(Ctrl + X > Y (저장)), 다음 명령어로 변경 사항을 적용합니다:
					3) bash>>> source ~/.bashrc  
				2) 설치가 제대로 되지 않음
					1) 만약 경로를 추가한 후에도 conda 명령이 작동하지 않는다면, Miniconda 설치가 제대로 되었는지 확인합니다. 설치 과정 중에서 오류가 있었는지 확인하고, Miniconda를 삭제하고 다시 설치할 수도 있습니다.
				3)  설치 확인
					1) Miniconda가 제대로 설치되었는지 확인하기 위해, 다음 명령어를 입력해서 설치된 Miniconda의 경로를 확인할 수 있습니다:
					2) bash>>> ls ~/miniconda3  
						1) 이 명령어로 bin, pkgs, envs 등 Miniconda 폴더가 보인다면 설치가 성공적으로 완료된 것입니다.

		6. 가상환경 & ipykernel
			1) 가상 환경 만들기
				1) Miniconda가 설치되면, Python 환경을 만들기 위해 Conda를 사용하여 가상 환경을 만듭니다. 다음 명령어를 입력하여 새로운 가상 환경을 생성합니다 (여기서는 myenv라는 이름의 환경을 예로 듭니다):
					1) bash>>> conda create --name myenv python=3.9  
			2) 환경을 생성한 후에는 해당 환경으로 활성화합니다:
				1) bash>>> conda activate myenv  
			3) conda 초기화
				1) bash>>> conda init  
					1) 명령어를 실행한 후, 현재 셸(터미널)을 닫고 다시 열어 주십시오. 그러면 Conda가 올바르게 설정됩니다.
			4) 가상환경 리스트 확인
				1) bash>>> conda env list
			5) 가상환경 삭제
				1) bash>>> conda remove --name myenv --all
					1) base 환경에서 실행
		7. ipykernel 설치하기
			1) 설치할 가상환경에서 설치해야 함.
				1) conda 가상환경
					1) base>>> conda activate myenv
					2) myenv>>> pip install ipykernel
				2) python3 가상환경
					1) bash>>> python3 -m  venv myenv
					2) bash>>> source myenv/bin/activate
					3) myenv>>> pip install ipykernel
		8) Jupyter Notebook 설치 (선택 사항)
			1) 만약 Jupyter Notebook을 사용하고 싶다면, 추가로 Jupyter를 설치해야 합니다:
				1) myenv>>> conda install jupyter  
			2) 커널 등록 (선택 사항)
				1) 이제 가상 환경을 Jupyter Notebook에서 사용할 수 있는 커널로 등록할 수 있습니다. 아래 명령어를 입력하여 커널을 추가합니다:
					1) myenv>>> python -m ipykernel install --user --name myenv --display-name "Python (myenv)"  
						1) 이 명령어는 Jupyter Notebook에서 myenv라는 이름의 커널을 사용할 수 있게 해줍니다.
			3) Jupyter Notebook 실행하기 (선택 사항)
				1) Jupyter Notebook을 실행하려면 아래 명령어를 입력합니다:
					1)myenv>>> jupyter notebook  
			4) 이제 웹 브라우저에서 Jupyter Notebook 인터페이스가 열리면, 생성한 커널을 선택하여 사용할 수 있습니다.
